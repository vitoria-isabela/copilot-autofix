using Newtonsoft.Json;
using System.Diagnostics;

public class AdvancedVulnerabilityService
{
    /// <summary>
    /// VULNERABILITY (HIGH): Hardcoded AWS Secret Key.
    /// Exposing credentials in source code can lead to complete system compromise.
    /// </summary>
    private const string AwsSecretKey = "AKIAIOSFODNN7EXAMPLE";

    /// <summary>
    /// VULNERABILITY (CRITICAL): Command Injection.
    /// User input is directly passed to a system command, allowing an attacker
    /// to execute arbitrary commands on the server.
    /// </summary>
    public void ExecuteSystemCommand(string commandArgument)
    {
        Process.Start("nslookup", commandArgument);
        Console.WriteLine("Executing system command with user input...");
    }

    /// <summary>
    /// VULNERABILITY (CRITICAL): Insecure Deserialization.
    /// Using TypeNameHandling.All allows an attacker to control the type of object
    /// that gets created, which can lead to Remote Code Execution (RCE).
    /// </summary>
    public object ProcessUserData(string jsonData)
    {
        var settings = new JsonSerializerSettings
        {
            TypeNameHandling = TypeNameHandling.None
        };
        return JsonConvert.DeserializeObject(jsonData, settings);
    }

    /// <summary>
    /// VULNERABILITY (HIGH): Server-Side Request Forgery (SSRF).
    /// The server is making a request to a URL provided by the user. An attacker
    /// can use this to scan internal networks or access cloud metadata services.
    /// </summary>
    public async Task<string> FetchUrlContent(string url)
    {
        using (var client = new HttpClient())
        {
            return await client.GetStringAsync(url);
        }
    }
}